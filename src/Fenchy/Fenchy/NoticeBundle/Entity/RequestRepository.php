<?php

namespace Fenchy\NoticeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

use Fenchy\UserBundle\Entity\User;
use Fenchy\RegularUserBundle\Entity\UserGroup;
use Symfony\Bundle\AsseticBundle\Factory\Worker\UseControllerWorker;
/**
 * RequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestRepository extends EntityRepository
{
        public function getFullDetailedList ($filter = NULL) {

            if(!($filter instanceof \Fenchy\AdminBundle\Entity\RequestsFilter)) {

                return $this->createQueryBuilder('r')
                        ->select('r, a, n, u')
                        ->join('r.author', 'a')
                        ->leftJoin('r.aboutNotice', 'n')
                        ->leftJoin('r.aboutUser', 'u')
                        ->leftJoin('r.aboutUserGroup', 'ug')                        
                        ->getQuery()
                        ->getResult();
            } 

           

            $query = $this->createQueryBuilder('r')
                        ->select('r, a')
                        ->join('r.author', 'a');
            $query->join('r.aboutUser', 'u');


           

             if($filter->text) {
                $query->where('LOWER(r.text) like :text')
                        ->setParameter('text', strtolower('%'.$filter->text.'%'));
            }

            if($filter->author) {
                $query->andWhere('LOWER(a.email) like :email')
                        ->setParameter('email', strtolower('%'.$filter->author.'%'));
            }

            if($filter->receiver) {               
                $query->andWhere('LOWER(u.email) like :email1')
                        ->setParameter('email1', strtolower('%'.$filter->receiver.'%'));
            }

            if($filter->target === 'user') {
                $query->addSelect('u');

            } elseif($filter->target === 'notice') {
                $query->join('r.aboutNotice', 'n')
                        ->addSelect('n');
            }




            if($filter->sort === 'stickersQ') {
                return $query
                        ->orderBy($filter->sort, $filter->order)
                        ->getQuery()
                        ->getResult();
            }
            if($filter->sort === 'receiver') {
                return $query
                        ->orderBy('r.aboutUser', $filter->order)
                        ->getQuery()
                        ->getResult();
            }

            return $query
                        ->orderBy('r.'.$filter->sort, $filter->order)
                        ->getQuery()
                        ->getResult();
        }
	public function findByInJSON($router, array $criteria, array $orderBy, $limit, $offset) {
		$requests = $this->findBy($criteria,$orderBy,$limit,$offset);
		$requestsJSON = array();

		foreach($requests as $oneRequest) {

			$author = $oneRequest->getAuthor();
			$authorProfileUrl = $router->generate(
					'fenchy_regular_user_user_otherprofile_aboutotherchoice',
					array('userId' => $author->getId()) );

			$aboutUser = $oneRequest->getAboutUser();
			$aboutUserProfileUrl = $router->generate(
					'fenchy_regular_user_user_profilev2',
					array('userId' => $aboutUser->getId()) );

			$aboutNotice = $oneRequest->getAboutNotice();
			//echo "<pre>"; print_r($aboutNotice);exit;

			$hasNotice = ( $aboutNotice && $aboutNotice->getId() );
			if ( $hasNotice ) {
				$aboutNoticeUrl = $router
				->generate('fenchy_notice_show_slug', array(
						'slug' => $aboutNotice->getSlug(),
						'year' => $aboutNotice->getCreatedAt()->format('Y'),
						'month' => $aboutNotice->getCreatedAt()->format('m'),
						'day' => $aboutNotice->getCreatedAt()->format('d') ));
			}

			$requestsJSON[] = array(
					'author'=>array(
							'id' => $author->getId(),
							'name' => $author->getUserRegular()->getFirstname(),
							'image' =>  $author->getUserRegular()->getAvatar(),
							'profileUrl' => $authorProfileUrl,
							'activity' => $author->getActivity()
					),
					'aboutuser' => array(
							'id' => $aboutUser->getId(),
							'name' => $aboutUser->getUserRegular()->getFirstname(),
							'image' => $aboutUser->getUserRegular()->getAvatar(),
							'profileUrl' => $aboutUserProfileUrl
					),
					'aboutnotice' => $hasNotice ? array(
							'id' => $aboutNotice->getId(),
							'title' => $aboutNotice->getTitle(),
							'image' => '',
							'noticeUrl' => $aboutNoticeUrl,
							'completed' => $aboutNotice->getCompleted(),
							'type' => $aboutNotice->getType()
					) : null,
					'id' => $oneRequest->getId(),
					'status' => $oneRequest->getStatus(),
					'requeststatus' => $oneRequest->getRequeststatus(),
					'text' => $oneRequest->getText(),
					'title' => $oneRequest->getTitle(),
					'createdAt'=> $oneRequest->getCreatedAt(),
					'piece_spot' => $oneRequest->getPieceSpot(),
					'price' => $oneRequest->getPrice(),
					'free' => $oneRequest->getFree(),
					'proposeprice' => $oneRequest->getProposeprice(),
					'totalprice' => $oneRequest->getTotalprice(),
					'currency' => $oneRequest->getCurrency(),
					'is_read' => $oneRequest->getIsRead(),
					'is_read_status' => $oneRequest->getIsReadStatus(),
					'start_date'=> $oneRequest->getStartDate(),
					'end_date' => $oneRequest->getEndDate(),
					'start_time' => $oneRequest->getStartTime(),
					'end_time' => $oneRequest->getEndTime()					
			);
		}

		return $requestsJSON;
	}

	/**
	 * Set the flag `is_read` on user's requests
	 * @param boolean $is_read_state
	 * @param \Fenchy\UserBundle\Entity\User $user
	 * @author Mateusz Krowiak <mkrowiak@pgs-soft.com>
	 */
	public function updateUsersRequestsWithIsRead($is_read_state, User $user) {

		$is_read_state = $is_read_state?'true':'false';

		$query = $this->createQueryBuilder('r')
		->update()
		->set('r.is_read', $is_read_state)
		->where('r.aboutUser = :user')
		->getQuery();

		$query->setParameter('user', $user);

		return $query->execute();

	}

	/**
	 *
	 * Return number of unread User's requests
	 * @return integer
	 * @param \Fenchy\UserBundle\Entity\User $user
	 */
	public function countUnreadUsersRequests(User $user, $listings=NULL) {

		$i = 0;
		$listing1 = array();
		if($listings)
		{
			foreach ($listings as $listing)
			{
				if($listing->getUserGroup()==null)
				{
					$listing1[$i++] = $listing;
				}
			}
		}
		if($listing1)
		{
			$query = $this->createQueryBuilder('r')
			->select('COUNT(r.id)')
			->where('r.is_read = :read and r.aboutUser = :user and r.aboutNotice IN(:listings)' )
			->setParameters(array(
					'read' => 'false',
					'user' => $user,
					'listings'=> array_values($listing1)
			))
			->getQuery();
		}
		else 
		{
			$query = $this->createQueryBuilder('r')
			->select('COUNT(r.id)')
			->where('r.is_read = :read and r.aboutUser = :user')
			->setParameters(array(
					'read' => 'false',
					'user' => $user
			))
			->getQuery();
		}
		$total = $query->getSingleScalarResult();
		return $total;

	}
	
	public function countUnreadUsersRequestsInGroup($notices) {
	
		$total = 0;
		foreach($notices as $notice)
		{	
			$query = $this->createQueryBuilder('r')
			->select('COUNT(r.id)')
			->where('r.is_read = :read and r.aboutNotice = :notice')
			->setParameters(array(
					'read' => 'false',
					'notice' => $notice
			))
			->getQuery();
	
			$total += $query->getSingleScalarResult();
		}
		
		return $total;
	
	}

	public function countUnreadUsersStatusRequests(User $user, $listings) {
	
		$i = 0;
		$listing1 = array();
		if($listings)
		{
			foreach ($listings as $listing)
			{
				if($listing->getUserGroup()==null)
				{
					$listing1[$i++] = $listing;
				}				
			}
		}
		if($listing1)
		{		
			$query = $this->createQueryBuilder('r')
			->select('COUNT(r.id)')
			->where('r.is_read_status = :read and r.author = :user and r.aboutNotice IN(:listings)')
			->setParameters(array(
					'read' => 'false',
					'user' => $user,
					'listings'=> array_values($listing1)
			))
			->getQuery();
		}
		else 
		{
			$query = $this->createQueryBuilder('r')
			->select('COUNT(r.id)')
			->where('r.is_read_status = :read and r.author = :user')
			->setParameters(array(
					'read' => 'false',
					'user' => $user,					
			))
			->getQuery();
		}
	
		$total = $query->getSingleScalarResult();
		return $total;
	
	}
	
	public function countUnreadUsersStatusRequestsInGroup($notices) {
	
		$total = 0;
		foreach($notices as $notice)
		{	
			$query = $this->createQueryBuilder('r')
			->select('COUNT(r.id)')
			->where('r.is_read = :read and r.aboutNotice = :notice')
			->setParameters(array(
					'read' => 'false',
					'notice' => $notice
			))
			->getQuery();
	
			$total += $query->getSingleScalarResult();
		}
		
		return $total;
	}
	
	public function countUnreadUsersStatusGroupRequests(User $user,$groupId) {
	
		$query = $this->createQueryBuilder('r')
		->select('COUNT(r.id)')
		->where('r.is_read_status = :read and r.author = :user')
		->setParameters(array(
				'read' => 'false',
				'user' => $user
		))
		->getQuery();
	
		$total = $query->getSingleScalarResult();
		
		return $total;
	
	}
	public function findCount( $criteria ) {
		$query =  $this->createQueryBuilder('r')
		->select('COUNT(r.id)');

		if ( array_key_exists('aboutUser', $criteria) ) {
			$query->andWhere('r.aboutUser = '.$criteria['aboutUser']);
		}

		if ( array_key_exists('author', $criteria) ) {
			$query->andWhere('r.author = '.$criteria['author']);
		}

		if ( array_key_exists('aboutNotice', $criteria) ) {
			$query->andWhere('r.aboutNotice = '.$criteria['aboutNotice']);
		}

		if ( array_key_exists('type', $criteria) ) {
			$query->andWhere('r.type = '.$criteria['type']);
		}

		return $query->getQuery()->getSingleScalarResult();
	}
	
	public function getNoticeIds(User $user)
	{
		return  $this->createQueryBuilder('r')
				->select('r')				
				->andWhere('r.author = :author')
                                ->andWhere('r.aboutUserGroup IS NULL')
                                ->setParameter('author', $user->getId())
                                ->getQuery()
				->getResult();
	}
	
	public function getRequests(User $user)
	{
		return  $this->createQueryBuilder('r')
		->select('r')
		->andWhere('r.author = :author')		
		->andWhere('r.aboutUserGroup IS NULL')
                ->setParameter('author', $user->getId())
                ->getQuery()
		->getResult();
	}
        
        public function getRequestsToUserGroup(User $user)
	{
		return  $this->createQueryBuilder('r')
		->select('r')
		->andWhere('r.author = :author')		
		->andWhere('r.aboutUserGroup IS NOT NULL')
                ->setParameter('author', $user->getId())
                ->getQuery()
		->getResult();
	}
	
	public function getGroupNoticeIds(User $user)
	{
		return  $this->createQueryBuilder('r')
				->select('r')
				->where('r.author = :author')
				->setParameter('author', $user->getId())
				->getQuery()
				->getResult();
	}
	
	public function getSingleNeighbourRequeste(User $user, User $aboutuser)
	{
		return  $this->createQueryBuilder('r')
				->select('r')
				->where('r.author = :author and r.aboutUser = :aboutuser')
				->setParameter('author', $user->getId())
				->setParameter('aboutuser', $aboutuser->getId())
				->getQuery()
				->getResult();
	}
        
        public function getSingleUserGroupRequests(User $user, UserGroup $aboutusergroup)
	{
		return  $this->createQueryBuilder('r')
				->select('r')
				->where('r.author = :author and r.aboutUserGroup = :aboutusergroup')
				->setParameter('author', $user->getId())
				->setParameter('aboutusergroup', $aboutusergroup->getId())
				->getQuery()
				->getResult();
	}
	
	public function getNeighboursRequests(User $user)
	{
		return  $this->createQueryBuilder('r')
				->select('r')
				->where('r.aboutUser = :aboutuser')
				->setParameter('aboutuser', $user->getId())
				->getQuery()
				->getResult();
	}
        public function getJoinClosedGroupsRequestsForMember(User $user)
	{
		return  $this->createQueryBuilder('r')
				->select('r')
				->where('r.author = :author and r.aboutUserGroup IS NOT NULL')
				->setParameter('author', $user->getId())
				->getQuery()
				->getResult();
	}
        
        public function getJoinClosedGroupsRequests(UserGroup $usergroup)
	{
		return  $this->createQueryBuilder('r')
				->select('r')
				->where('r.aboutUserGroup = :aboutusergroup')
				->setParameter('aboutusergroup', $usergroup->getId())
				->getQuery()
				->getResult();
	}
	
	public function countUsersDoneRequest(User $user) {
	
		$query = $this->createQueryBuilder('r')
		->select('COUNT(r.id)')
		->where('r.requeststatus = :done and r.aboutUser = :user')
		->setParameters(array(
				'done' => 'done',
				'user' => $user
		))
		->getQuery();
	
		$total = $query->getSingleScalarResult();
		return $total;
	
	}
	
	public function countMyRequestMarkAsDone(User $user) {
	
		$query = $this->createQueryBuilder('r')
		->select('COUNT(r.id)')
		->where('r.requeststatus = :done and r.author = :user')
		->setParameters(array(
				'done' => 'done',
				'user' => $user
		))
		->getQuery();
	
		$total = $query->getSingleScalarResult();
		return $total;
	}
}